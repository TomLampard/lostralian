generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRole {
    USER        @map("user") // Default
    CONTRIBUTOR @map("contributor") // Can create edit, remove posts, comments, mixtape media, and manage orders
    ADMIN       @map("admin") // admin - delta and tomkat only
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    profile       Profile?
    profileId     String?
    orders        Order[]
    posts         Post[]
    comments      Comment[]
    accounts      Account[]
    sessions      Session[]
    Cart          Cart?
    role          UserRole      @default(USER)
    ratingsGiven  Ratings[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id        String   @id @default(cuid())
    bio       String?
    website   String?
    location  String?
    nickname  String?  @unique
    image     String?
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    published Boolean     @default(false)
    title     String
    content   String
    images    PostImage[]
    author    User        @relation(fields: [authorId], references: [id])
    authorId  String
    comments  Comment[]

    @@index([authorId])
}

model Comment {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    published Boolean        @default(false)
    content   String
    images    CommentImage[]
    author    User           @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post           @relation(fields: [postId], references: [id])
    postId    String

    @@index([authorId])
    @@index([postId])
}

model Category {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime?    @updatedAt
    name      String       @unique
    slug      String       @unique
    types     CategoryType @default(MUSIC)
    parentId  String?
    parent    Category?    @relation("SubCategoryToCategory", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    children  Category[]   @relation("SubCategoryToCategory")
    products  Product[]

    @@index([parentId])
}

model CartItem {
    id        String  @id @default(cuid())
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    cart      Cart    @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    cartId    String

    @@index([productId])
    @@index([cartId])
}

model Cart {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?    @unique
    items     CartItem[]

    @@index([userId])
}

model Product {
    id                 String           @id @default(cuid())
    name               String           @unique
    slug               String           @unique
    description        String
    alt                String
    price              Decimal          @db.Decimal(10, 2)
    inventory          ProductInventory[] 
    published          Boolean          @default(true)
    images             ProductImage[]
    createdAt          DateTime         @default(now())
    categories         Category[]
    categoryId         String?
    sizes              ProductSize      @default(ONE_SIZE_ONLY)
    colors             ProductColor     @default(ONE_COLOR_ONLY)
    shippingZones      ShippingZone     @default(AUSTRALIA)
    shippingCosts      ShippingCost[]
    cartItem           CartItem[]
    ratings            Ratings[]

    @@index([categoryId])
}

model ProductInventory {
    id        String  @id @default(cuid())
    quantity  Int
    product   Product   @relation(fields: [productId], references: [id])
    productId String   @unique
    size      ProductSize @default(ONE_SIZE_ONLY)
    color     ProductColor @default(ONE_COLOR_ONLY)   
    @@index([productId])
}

model ShippingCost {
    id        String       @id @default(cuid())
    cost      Int
    zone      ShippingZone @default(AUSTRALIA)
    product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String

    @@index([productId])
}

model ProductImage {
    id        String   @id @default(cuid())
    url       String
    key       String
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String?

    @@index([productId])
}

model CommentImage {
    id        String   @id @default(cuid())
    url       String
    key       String
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?

    @@index([commentId])
}

model PostImage {
    id     String  @id @default(cuid())
    url    String
    key    String
    post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String?

    @@index([postId])
}

model Ratings {
    id          String   @id @default(cuid())
    rating      Int
    createdAt   DateTime @default(now())
    product     Product  @relation(fields: [productId], references: [id])
    productId   String
    title       String
    description String
    userName    String?
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?

    @@index([productId])
    @@index([userId])
}

model Order {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    status       String
    totalAmount  Int
    customerNote String

    @@index([userId])
}

enum ShippingZone {
    AUSTRALIA     @map("AUSTRALIA")
    NEW_ZEALAND   @map("NEW_ZEALAND")
    UNITED_STATES @map("UNITED_STATES")
    CANADA        @map("CANADA")
    EUROPE        @map("EUROPE")
    ASIA          @map("ASIA")
    MIDDLE_EAST   @map("MIDDLE_EAST")
    AFRICA        @map("AFRICA")
    SOUTH_AMERICA @map("SOUTH_AMERICA")
    ANTARCTICA    @map("ANTARCTICA")
    MARS          @map("MARS")
    PINE_GAP      @map("PINE_GAP")  
}

enum CategoryType {
    MUSIC      @map("MUSIC")
    SECONDHAND @map("SECONDHAND")
    DELTA      @map("DELTA")
    MENS       @map("MENS")
    WOMENS     @map("WOMENS")
    YOUTH      @map("YOUTH")
    KIDS       @map("KIDS")
}

enum ProductSize {
    ONE_SIZE_ONLY @map("ONE_SIZE_ONLY")
    xxs           @map("XXS")
    XS            @map("XS")
    S             @map("S")
    M             @map("M")
    L             @map("L")
    XL            @map("XL")
    XXL           @map("XXL")
    XXXL          @map("XXXL")
}

enum ProductColor {
    ONE_COLOR_ONLY @map("ONE_COLOR_ONLY")
    BLACK          @map("BLACK")
    WHITE          @map("WHITE")
    GRAY           @map("GRAY")
    MARBLE_VINYL   @map("MARBLE_VINYL")
    LOSTRALIAN_RED @map("LOSTRALIAN_RED")
    GREEN          @map("GREEN")
    PINK           @map("PINK")
    BLUE           @map("BLUE")
    PURPLE         @map("PURPLE")
    NATURAL        @map("NATURAL")
    GUM            @map("GUM")
    NATURAL_WOOD   @map("NATURAL_WOOD")
    BLACK_WOOD     @map("BLACK_WOOD")
}
